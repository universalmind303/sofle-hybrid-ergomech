/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

&lt {
    quick-tap-ms = <150>;
    require-prior-idle-ms = <50>;
    tapping-term-ms = <195>;
};

/ {
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;    // <---[[moderate duration]]
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
        };

        gesc: gesc {
            compatible = "zmk,behavior-mod-morph";
            label = "GESC";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI|MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT|MOD_LGUI|MOD_RGUI)>;
        };

        mokp: mokp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOKP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <195>;
            hold-trigger-key-positions = <14 15 16 28 27 26 27 28 38 39 40 52 51>;
        };

        qwerty: qwerty {
            compatible = "zmk,behavior-mod-morph";
            label = "QWERTY";
            bindings = <&kp LS(C_PLAY_PAUSE)>, <&to 4>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        cap_dance: cap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAP_DANCE";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        nav_tog: nav_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_TOG";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <190>;
            require-prior-idle-ms = <90>;
            hold-trigger-key-positions = <25 26 27 15 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46 23 35 16 28>;
        };

        spascape: spascape {
            compatible = "zmk,behavior-mod-morph";
            label = "SPASCAPE";
            bindings = <&kp SPACE>, <&kp ESCAPE>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };
    };

    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        arrrow: arrow_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW_MACRO";
        };

        fat_arrow: fat_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "FAT_ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            label = "colemak";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&gesc                   &kp N1        &kp N2       &kp N3        &kp N4                       &kp N5            &kp N6     &kp N7                &kp N8        &kp N9                    &kp N0        &kp DEL
&mt LC(LA(LSHIFT)) TAB  &mokp 3 Q     &kp W        &bhm RCTRL F  &bhm LS(LA(LC(LEFT_GUI))) P  &kp G             &kp J      &mokp 3 L             &bhm RCTRL U  &kp Y                     &kp SEMI      &kp GRAVE
&cap_dance              &bhm LSHFT A  &bhm LALT R  &bhm LGUI S   &bhm LS(LA(LCTRL)) T         &kp D             &kp H      &kp N                 &bhm RGUI E   &bhm RALT I               &bhm RSHFT O  &bhm LS(LA(LC(LGUI))) SQT
&kp LS(TAB)             &kp Z         &kp X        &kp C         &kp V                        &kp B             &kp K      &kp M                 &kp COMMA     &kp DOT                   &kp FSLH      &kp RET
&kp C_MUTE              &none         &none        &kp LEFT_GUI  &lt 1 MINUS                  &nav_tog 5 EQUAL  &spascape  &nav_tog 2 BACKSPACE  &kp ESCAPE    &sk LS(LA(LC(LEFT_GUI)))  &none
                                                                                                                &qwerty    &kp C_NEXT            &kp UP_ARROW  &kp C_PREV                &kp DOWN
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN RS(C_VOLUME_UP)>,
                <&inc_dec_kp PG_UP PG_UP>;
        };

        symbols_layer {
            label = "symbols";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans       &kp F1    &kp F2     &kp F3         &kp F4            &kp F5         &kp F6         &kp F7         &kp F8     &kp F9     &kp F10           &kp F11
&kp TILDE    &kp EXCL  &kp MINUS  &kp LESS_THAN  &kp GREATER_THAN  &kp PIPE       &none          &kp AMPERSAND  &kp EQUAL  &kp PIPE   &none             &kp GRAVE
&kp AT_SIGN  &kp LPAR  &kp RPAR   &kp LBRC       &kp RBRC          &kp SLASH      &kp GRAVE      &kp CARET      &kp HASH   &kp ASTRK  &kp DOLLAR        &kp DQT
&trans       &none     &kp MINUS  &kp LBKT       &kp RBKT          &kp BACKSLASH  &kp LESS_THAN  &kp MINUS      &kp EQUAL  &kp UNDER  &kp GREATER_THAN  &trans
&trans       &trans    &trans     &trans         &trans            &trans         &kp COLON      &kp PERCENT    &trans     &trans     &trans
                                                                                  &kp A          &kp B          &kp C      &kp D      &kp E
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        navigation_layer {
            label = "navigation";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&none   &none           &none         &none         &none   &none   &none     &none                 &none                     &none                      &none                  &none
&trans  &trans          &trans        &kp LCTRL     &trans  &trans  &kp HOME  &kp LG(LEFT_BRACKET)  &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)  &trans
&trans  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI  &trans  &none   &kp END   &kp LEFT              &kp DOWN                  &kp UP                     &kp RIGHT              &trans
&trans  &none           &none         &none         &none   &trans  &kp HOME  &kp LG(LEFT)          &kp PG_DN                 &kp PG_UP                  &kp LG(RIGHT)          &none
&trans  &trans          &trans        &trans        &trans  &trans  &trans    &trans                &trans                    &trans                     &trans
                                                                    &kp A     &kp B                 &kp C                     &kp D                      &kp E
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numpad {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            label = "numpad";
            bindings = <
&none  &none  &none   &none    &none   &none  &none  &bt BT_SEL 0  &bt BT_SEL 1  &none  &none  &none
&none  &none  &kp N1  &kp N2   &kp N3  &none  &none  &none         &none         &none  &none  &none
&none  &none  &kp N4  &kp N5   &kp N6  &none  &none  &none         &none         &none  &none  &none
&none  &none  &kp N7  &kp N8   &kp N9  &none  &none  &none         &none         &none  &none  &none
&none  &none  &none   &kp DOT  &kp N0  &none  &none  &none         &none         &none  &none
                                              &kp A  &kp B         &kp C         &kp D  &kp E
            >;
        };

        qwerty {
            label = "qwerty";
            bindings = <
&kp ESCAPE  &kp N1  &kp N2     &kp N3    &kp N4    &kp N5     &kp N6     &kp N7    &kp N8     &kp N9     &kp N0    &kp BSPC
&kp TAB     &kp Q   &kp W      &kp E     &kp R     &kp T      &kp Y      &kp U     &kp I      &kp O      &kp P     &kp LBKT
&kp CAPS    &kp A   &kp S      &kp D     &kp F     &kp G      &kp H      &kp J     &kp K      &kp L      &kp SEMI  &kp APOS
&kp LSHFT   &kp Z   &kp X      &kp C     &kp V     &kp B      &kp N      &kp M     &kp COMMA  &kp DOT    &kp FSLH  &kp ENTER
&none       &none   &kp LCTRL  &kp LALT  &kp LGUI  &kp SPACE  &kp SPACE  &kp RGUI  &kp RALT   &kp RCTRL  &none
                                                              &to 0      &none     &none      &none      &none
            >;
        };

        brackets {
            bindings = <
&trans  &trans          &trans    &trans        &trans                    &trans  &trans  &trans          &trans                &trans                 &trans             &trans
&trans  &trans          &trans    &kp LCTRL     &kp LA(LC(LS(LEFT_GUI)))  &trans  &trans  &none           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none              &kp GRAVE
&trans  &kp LEFT_SHIFT  &kp LALT  &kp LEFT_GUI  &kp LS(LA(LCTRL))         &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp SINGLE_QUOTE
&trans  &trans          &trans    &trans        &trans                    &trans  &trans  &trans          &kp LESS_THAN         &kp GREATER_THAN       &trans             &trans
&trans  &trans          &trans    &trans        &trans                    &trans  &trans  &trans          &trans                &trans                 &trans
                                                                                  &trans  &trans          &trans                &trans                 &trans
            >;
        };
    };
};
